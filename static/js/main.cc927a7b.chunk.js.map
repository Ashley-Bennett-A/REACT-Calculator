{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["math","create","all","Display","props","react_default","a","createElement","className","number","Button","onClick","do","value","Row","App_Button","button1","button2","button3","button4","Board","App_Row","App","state","display","working","answered","_this","newDisplay","setState","answer","evaluate","App_Display","this","App_Board","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAKMA,SAAOC,YAAOC,IADL,KAGTC,EAAU,SAAAC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,UAKXC,EAAS,SAAAN,GACb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASG,QAAS,kBAAMP,EAAMQ,GAAGR,EAAMS,SACtDT,EAAMS,SAMTC,EAAM,SAAAV,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,CAAQF,MAAOT,EAAMY,QAASJ,GAAIR,EAAMQ,KACxCP,EAAAC,EAAAC,cAACQ,EAAD,CAAQF,MAAOT,EAAMa,QAASL,GAAIR,EAAMQ,KACxCP,EAAAC,EAAAC,cAACQ,EAAD,CAAQF,MAAOT,EAAMc,QAASN,GAAIR,EAAMQ,KACxCP,EAAAC,EAAAC,cAACQ,EAAD,CAAQF,MAAOT,EAAMe,QAASP,GAAIR,EAAMQ,OAKxCQ,EAAQ,SAAAhB,GACZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,CAAKL,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIP,GAAIR,EAAMQ,KAC/DP,EAAAC,EAAAC,cAACc,EAAD,CAAKL,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIP,GAAIR,EAAMQ,KAC/DP,EAAAC,EAAAC,cAACc,EAAD,CAAKL,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIP,GAAIR,EAAMQ,KAC/DP,EAAAC,EAAAC,cAACc,EAAD,CAAKL,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,IAAIP,GAAIR,EAAMQ,OAyCtDU,6MAnCbC,MAAQ,CACNC,QAAS,EACTC,QAAS,EACTC,UAAU,KAGZd,GAAK,SAAAC,GACH,IAAIW,EAAUG,EAAKJ,MAAMC,QACXG,EAAKJ,MAAME,QACzB,GAAgB,IAAZD,EAAe,CACjB,IAAII,EAAaf,EACjBc,EAAKE,SAAS,CAAEL,QAASI,SACpB,GAAgB,IAAZJ,EAAe,CACxB,IAAII,EAAaJ,EAAUX,EAC3Bc,EAAKE,SAAS,CAAEL,QAASI,IAG3B,GAAc,MAAVf,EAAe,CACjB,IAAIW,EAAUG,EAAKJ,MAAMC,QACrBM,EAAS9B,EAAK+B,SAASP,GAC3BG,EAAKE,SAAS,CAAEL,QAASM,EAAQJ,UAAU,8EAK7C,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAACyB,EAAD,CAASvB,OAAQwB,KAAKV,MAAMC,UAC5BnB,EAAAC,EAAAC,cAAC2B,EAAD,CAAOtB,GAAIqB,KAAKrB,aA9BNuB,IAAMC,WCnCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc927a7b.chunk.js","sourcesContent":["import React from \"react\";\nimport { create, all } from \"mathjs\";\nimport \"./App.css\";\n\nconst config = {};\nconst math = create(all, config);\n\nconst Display = props => {\n  return (\n    <div className=\"display\">\n      <h1>{props.number}</h1>\n    </div>\n  );\n};\n\nconst Button = props => {\n  return (\n    <div>\n      <button className=\"button\" onClick={() => props.do(props.value)}>\n        {props.value}\n      </button>\n    </div>\n  );\n};\n\nconst Row = props => {\n  return (\n    <div className=\"row\">\n      <Button value={props.button1} do={props.do} />\n      <Button value={props.button2} do={props.do} />\n      <Button value={props.button3} do={props.do} />\n      <Button value={props.button4} do={props.do} />\n    </div>\n  );\n};\n\nconst Board = props => {\n  return (\n    <div>\n      <Row button1=\"7\" button2=\"8\" button3=\"9\" button4=\"/\" do={props.do} />\n      <Row button1=\"4\" button2=\"5\" button3=\"6\" button4=\"*\" do={props.do} />\n      <Row button1=\"1\" button2=\"2\" button3=\"3\" button4=\"-\" do={props.do} />\n      <Row button1=\"0\" button2=\".\" button3=\"=\" button4=\"+\" do={props.do} />\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  state = {\n    display: 0,\n    working: 0,\n    answered: false\n  };\n\n  do = value => {\n    let display = this.state.display;\n    let working = this.state.working;\n    if (display === 0) {\n      let newDisplay = value;\n      this.setState({ display: newDisplay });\n    } else if (display !== 0) {\n      let newDisplay = display + value;\n      this.setState({ display: newDisplay });\n    }\n\n    if (value === \"=\") {\n      let display = this.state.display;\n      let answer = math.evaluate(display);\n      this.setState({ display: answer, answered: true });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Ashley's React Calculator</h1>\n        <Display number={this.state.display} />\n        <Board do={this.do} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}